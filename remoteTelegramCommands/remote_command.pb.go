// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remote_command.proto

package remoteTelegramCommands

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RemoteCommandRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Group                int64    `protobuf:"varint,3,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteCommandRequest) Reset()         { *m = RemoteCommandRequest{} }
func (m *RemoteCommandRequest) String() string { return proto.CompactTextString(m) }
func (*RemoteCommandRequest) ProtoMessage()    {}
func (*RemoteCommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_remote_command_f727da9f7efb6a2c, []int{0}
}
func (m *RemoteCommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteCommandRequest.Unmarshal(m, b)
}
func (m *RemoteCommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteCommandRequest.Marshal(b, m, deterministic)
}
func (dst *RemoteCommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteCommandRequest.Merge(dst, src)
}
func (m *RemoteCommandRequest) XXX_Size() int {
	return xxx_messageInfo_RemoteCommandRequest.Size(m)
}
func (m *RemoteCommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteCommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteCommandRequest proto.InternalMessageInfo

func (m *RemoteCommandRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoteCommandRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RemoteCommandRequest) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

type RemoteRequest struct {
	From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteRequest) Reset()         { *m = RemoteRequest{} }
func (m *RemoteRequest) String() string { return proto.CompactTextString(m) }
func (*RemoteRequest) ProtoMessage()    {}
func (*RemoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_remote_command_f727da9f7efb6a2c, []int{1}
}
func (m *RemoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteRequest.Unmarshal(m, b)
}
func (m *RemoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteRequest.Marshal(b, m, deterministic)
}
func (dst *RemoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteRequest.Merge(dst, src)
}
func (m *RemoteRequest) XXX_Size() int {
	return xxx_messageInfo_RemoteRequest.Size(m)
}
func (m *RemoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteRequest proto.InternalMessageInfo

func (m *RemoteRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *RemoteRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Request struct {
	State                string   `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Nextstate            string   `protobuf:"bytes,2,opt,name=nextstate,proto3" json:"nextstate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_remote_command_f727da9f7efb6a2c, []int{2}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Request) GetNextstate() string {
	if m != nil {
		return m.Nextstate
	}
	return ""
}

type Response struct {
	From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Fields               []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_remote_command_f727da9f7efb6a2c, []int{3}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func init() {
	proto.RegisterType((*RemoteCommandRequest)(nil), "remoteTelegramCommands.RemoteCommandRequest")
	proto.RegisterType((*RemoteRequest)(nil), "remoteTelegramCommands.RemoteRequest")
	proto.RegisterType((*Request)(nil), "remoteTelegramCommands.Request")
	proto.RegisterType((*Response)(nil), "remoteTelegramCommands.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RemoteCommandClient is the client API for RemoteCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RemoteCommandClient interface {
	RegisterCommand(ctx context.Context, in *RemoteCommandRequest, opts ...grpc.CallOption) (RemoteCommand_RegisterCommandClient, error)
	RegisterCommandLet(ctx context.Context, in *Request, opts ...grpc.CallOption) (RemoteCommand_RegisterCommandLetClient, error)
}

type remoteCommandClient struct {
	cc *grpc.ClientConn
}

func NewRemoteCommandClient(cc *grpc.ClientConn) RemoteCommandClient {
	return &remoteCommandClient{cc}
}

func (c *remoteCommandClient) RegisterCommand(ctx context.Context, in *RemoteCommandRequest, opts ...grpc.CallOption) (RemoteCommand_RegisterCommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RemoteCommand_serviceDesc.Streams[0], "/remoteTelegramCommands.RemoteCommand/RegisterCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCommandRegisterCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteCommand_RegisterCommandClient interface {
	Recv() (*RemoteRequest, error)
	grpc.ClientStream
}

type remoteCommandRegisterCommandClient struct {
	grpc.ClientStream
}

func (x *remoteCommandRegisterCommandClient) Recv() (*RemoteRequest, error) {
	m := new(RemoteRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteCommandClient) RegisterCommandLet(ctx context.Context, in *Request, opts ...grpc.CallOption) (RemoteCommand_RegisterCommandLetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RemoteCommand_serviceDesc.Streams[1], "/remoteTelegramCommands.RemoteCommand/RegisterCommandLet", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCommandRegisterCommandLetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoteCommand_RegisterCommandLetClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type remoteCommandRegisterCommandLetClient struct {
	grpc.ClientStream
}

func (x *remoteCommandRegisterCommandLetClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteCommandServer is the server API for RemoteCommand service.
type RemoteCommandServer interface {
	RegisterCommand(*RemoteCommandRequest, RemoteCommand_RegisterCommandServer) error
	RegisterCommandLet(*Request, RemoteCommand_RegisterCommandLetServer) error
}

func RegisterRemoteCommandServer(s *grpc.Server, srv RemoteCommandServer) {
	s.RegisterService(&_RemoteCommand_serviceDesc, srv)
}

func _RemoteCommand_RegisterCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemoteCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteCommandServer).RegisterCommand(m, &remoteCommandRegisterCommandServer{stream})
}

type RemoteCommand_RegisterCommandServer interface {
	Send(*RemoteRequest) error
	grpc.ServerStream
}

type remoteCommandRegisterCommandServer struct {
	grpc.ServerStream
}

func (x *remoteCommandRegisterCommandServer) Send(m *RemoteRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _RemoteCommand_RegisterCommandLet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteCommandServer).RegisterCommandLet(m, &remoteCommandRegisterCommandLetServer{stream})
}

type RemoteCommand_RegisterCommandLetServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type remoteCommandRegisterCommandLetServer struct {
	grpc.ServerStream
}

func (x *remoteCommandRegisterCommandLetServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _RemoteCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remoteTelegramCommands.RemoteCommand",
	HandlerType: (*RemoteCommandServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterCommand",
			Handler:       _RemoteCommand_RegisterCommand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RegisterCommandLet",
			Handler:       _RemoteCommand_RegisterCommandLet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "remote_command.proto",
}

func init() {
	proto.RegisterFile("remote_command.proto", fileDescriptor_remote_command_f727da9f7efb6a2c)
}

var fileDescriptor_remote_command_f727da9f7efb6a2c = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x35, 0xc6, 0xb6, 0x76, 0x44, 0x84, 0x21, 0x94, 0x20, 0x82, 0x21, 0x20, 0xe4, 0x20, 0x41,
	0xf4, 0xdc, 0x93, 0x57, 0x0f, 0xb2, 0x78, 0xf3, 0x20, 0xdb, 0x66, 0x1a, 0x22, 0xdd, 0xdd, 0xb8,
	0xb3, 0x05, 0x3f, 0xd5, 0xcf, 0x91, 0x66, 0x77, 0xb1, 0x48, 0x2b, 0x78, 0x9b, 0xf7, 0xde, 0xcc,
	0x7b, 0xc9, 0x63, 0x21, 0xb3, 0xa4, 0x8c, 0xa3, 0xb7, 0xa5, 0x51, 0x4a, 0xea, 0xa6, 0xee, 0xad,
	0x71, 0x06, 0x67, 0x9e, 0x7d, 0xa1, 0x35, 0xb5, 0x56, 0xaa, 0x47, 0x2f, 0x72, 0xb9, 0x80, 0x4c,
	0x0c, 0x4a, 0x60, 0x04, 0x7d, 0x6c, 0x88, 0x1d, 0x22, 0x9c, 0x68, 0xa9, 0x28, 0x4f, 0x8a, 0xa4,
	0x9a, 0x8a, 0x61, 0xc6, 0x02, 0xce, 0x1a, 0xe2, 0xa5, 0xed, 0x7a, 0xd7, 0x19, 0x9d, 0x1f, 0x0f,
	0xd2, 0x2e, 0x85, 0x19, 0x8c, 0x5a, 0x6b, 0x36, 0x7d, 0x9e, 0x16, 0x49, 0x95, 0x0a, 0x0f, 0xca,
	0x39, 0x9c, 0xfb, 0x8c, 0x1d, 0xf3, 0x95, 0x35, 0x2a, 0x9a, 0x6f, 0x67, 0xcc, 0x61, 0xa2, 0x88,
	0x59, 0xb6, 0x14, 0x8c, 0x23, 0x2c, 0xe7, 0x30, 0x89, 0x87, 0x19, 0x8c, 0xd8, 0x49, 0x17, 0x3f,
	0xcb, 0x03, 0xbc, 0x82, 0xa9, 0xa6, 0x4f, 0xe7, 0x15, 0x7f, 0xfc, 0x43, 0x94, 0xcf, 0x70, 0x2a,
	0x88, 0x7b, 0xa3, 0x99, 0xfe, 0x17, 0x8c, 0x33, 0x18, 0xaf, 0x3a, 0x5a, 0x37, 0x9c, 0xa7, 0x45,
	0x5a, 0x4d, 0x45, 0x40, 0xf7, 0x5f, 0x49, 0xfc, 0xa1, 0x50, 0x1a, 0xbe, 0xc3, 0x85, 0xa0, 0xb6,
	0x63, 0x47, 0x36, 0x52, 0xb7, 0xf5, 0xfe, 0xc6, 0xeb, 0x7d, 0x75, 0x5f, 0xde, 0xfc, 0xbd, 0x1d,
	0xd6, 0xca, 0xa3, 0xbb, 0x04, 0x5f, 0x01, 0x7f, 0x65, 0x3d, 0x91, 0xc3, 0xeb, 0xc3, 0x06, 0x3e,
	0xa1, 0x38, 0xbc, 0xe0, 0xcb, 0xd9, 0x9a, 0x2f, 0xc6, 0xc3, 0x6b, 0x79, 0xf8, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x11, 0x79, 0x79, 0xdb, 0x45, 0x02, 0x00, 0x00,
}
